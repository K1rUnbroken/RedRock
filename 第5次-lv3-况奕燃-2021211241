package main

import (
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"net/http"
	"os"
)

var users = map[string]string{}

func CheckLoginUsername(username string) bool {
	if users[username] == "" {
		return false
	}
	return true
}

func CheckLoginPassword(username, password string) bool {
	if users[username] != password {
		return false
	}
	return true
}

func CheckRegister(username string) bool {
	if users[username] != "" {
		return false
	}
	return true
}

func Login(c *gin.Context) {
	username := c.PostForm("username")
	password := c.PostForm("password")

	flag := CheckLoginUsername(username)
	if !flag {
		c.JSON(http.StatusInternalServerError, gin.H{
			"status":  500,
			"message": "user doesn't exists!",
		})
		c.Abort()
		return
	}

	flag = CheckLoginPassword(username, password)
	if !flag {
		c.JSON(http.StatusInternalServerError, gin.H{
			"status":  500,
			"message": "wrong password!",
		})
		c.Abort()
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"status":  200,
		"message": "login successful!",
	})

	c.Next()
}

func Register(c *gin.Context) {
	username := c.PostForm("username")
	password := c.PostForm("password")

	flag := CheckRegister(username)
	if !flag {
		c.JSON(http.StatusInternalServerError, gin.H{
			"status":  500,
			"message": "user already exists!",
		})
		c.Abort()
		return
	}

	users[username] = password
	c.JSON(http.StatusOK, gin.H{
		"status":  200,
		"message": "register successful!",
	})

	c.Next()
}

func ReadFile(c *gin.Context) {
	fileName := "users.txt"
	file, err := os.OpenFile(fileName, os.O_RDONLY|os.O_CREATE, 0666)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"status":  500,
			"message": "fail to open file!",
		})
		return
	}
	defer func(file *os.File) {
		err := file.Close()
		if err != nil {

		}
	}(file)

	data, err := os.ReadFile(fileName)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"status":  500,
			"message": "fail to read file!",
		})
		return
	}

	err = json.Unmarshal(data, &users)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"status":  500,
			"message": "fail to unmarshal data!",
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"status":  200,
		"message": "read file successful!",
	})

	fmt.Println(users)
}

func WriteFile(c *gin.Context) {
	fileName := "users.txt"
	file, err := os.OpenFile(fileName, os.O_WRONLY|os.O_CREATE, 0666)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"status":  500,
			"message": "fail to open file!",
		})
		return
	}
	defer func(file *os.File) {
		err := file.Close()
		if err != nil {

		}
	}(file)

	data, err := json.Marshal(users)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"status":  500,
			"message": "fail to marshal data!",
		})
		return
	}

	_, err = file.Write(data)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"status":  500,
			"message": "fail to write file!",
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"status":  200,
		"message": "write file successful!",
	})
}

func main() {
	r := gin.Default()
	r.POST("/login", Login, ReadFile)
	r.POST("/register", Register, WriteFile)
	r.Run()
}
